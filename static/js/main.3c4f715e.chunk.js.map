{"version":3,"sources":["components/input.js","components/main.jsx","App.js","serviceWorker.js","reducers/inputReducer.js","reducers/mainReducer.js","store.js","index.js"],"names":["Todolist","style","fontSize","width","margin","display","Input","type","onChange","e","props","handleChange","target","Button","color","onClick","add","todolist","Component","connect","state","input","dispatch","value","inputValue","id","Math","floor","random","Main","this","todo","map","el","InputGroup","defaultValue","InputGroupAddon","addonType","key","remove","main","App","className","Boolean","window","location","hostname","match","inputReducer","action","mainReducer","filter","store","createStore","combineReducers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUAGMA,E,uKACM,IAAD,OACP,OACE,oCACE,wBAAIC,MAAO,CAAEC,SAAU,QAAvB,iBACA,yBAAKD,MAAO,CAAEE,MAAO,QAASC,OAAQ,OAAQC,QAAS,SACrD,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,SAAU,SAACC,GACT,EAAKC,MAAMC,aAAaF,EAAEG,WAI9B,kBAACC,EAAA,EAAD,CACEC,MAAM,YACNC,QAAS,WACP,EAAKL,MAAMM,IAAI,EAAKN,MAAMO,YAH9B,iB,GAbaC,aA8CRC,eANS,SAACC,GACvB,MAAO,CACLH,SAAUG,EAAMC,UAhBO,SAACC,GAC1B,MAAO,CACLX,aAAc,SAACC,GACbU,EAAS,CAAEf,KAAM,YAAagB,MAAOX,EAAOW,SAE9CP,IAAK,SAACK,GACJ,IACIG,EAAaH,EACbI,EAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UAEzBN,EAAS,CAAEf,KAAM,YAAagB,MADxB,CAAEC,aAAYC,YAWXN,CAA6CnB,G,gBC9CtD6B,E,uKACM,IAAD,OACP,OACE,6BACGC,KAAKpB,MAAMqB,KAAKC,KAAI,SAACC,GAAD,OACnB,kBAACC,EAAA,EAAD,CACEjC,MAAO,CACLG,OAAQ,YACRD,MAAO,QAGT,kBAACG,EAAA,EAAD,CAAO6B,aAAcF,EAAGT,aACxB,kBAACY,EAAA,EAAD,CAAiBC,UAAU,SAASC,IAAKL,EAAGR,IAC1C,kBAACZ,EAAA,EAAD,CACEC,MAAM,OACNC,QAAS,WACP,EAAKL,MAAM6B,OAAON,EAAGR,MAHzB,e,GAbKP,aAyCJC,eAbS,SAACC,GACvB,MAAO,CACLW,KAAMX,EAAMoB,SAGW,SAAClB,GAC1B,MAAO,CACLiB,OAAQ,SAACd,GACPH,EAAS,CAAEf,KAAM,eAAgBkB,GAAIA,QAK5BN,CAA6CU,G,MCvC7C,SAASY,IACtB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,OCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCZSC,EANM,WAAyB,IAAxB5B,EAAuB,uDAAf,GAAI6B,EAAW,uCAC3C,MAAoB,cAAhBA,EAAO1C,KACF0C,EAAO1B,MAETH,G,QCKM8B,EATK,WAAyB,IAAxB9B,EAAuB,uDAAf,GAAI6B,EAAW,uCAC1C,MAAoB,cAAhBA,EAAO1C,KACI,sBAAOa,GAAP,CAAc6B,EAAO1B,QAEhB,iBAAhB0B,EAAO1C,KACFa,EAAM+B,QAAO,SAAClB,GAAD,OAAQA,EAAGR,KAAOwB,EAAOxB,MAExCL,GCIMgC,G,MANDC,YACZC,YAAgB,CACdjC,MAAO2B,EACPR,KAAMU,MCCVK,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SJsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3c4f715e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Input } from \"reactstrap\";\r\nclass Todolist extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1 style={{ fontSize: \"5vw\" }}>MA TO DO LIST</h1>\r\n        <div style={{ width: \"300px\", margin: \"auto\", display: \"flex\" }}>\r\n          <Input\r\n            type=\"text\"\r\n            onChange={(e) => {\r\n              this.props.handleChange(e.target);\r\n            }}\r\n          />\r\n\r\n          <Button\r\n            color=\"secondary\"\r\n            onClick={() => {\r\n              this.props.add(this.props.todolist);\r\n            }}\r\n          >\r\n            Ajouter\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    handleChange: (target) => {\r\n      dispatch({ type: \"SET_INPUT\", value: target.value });\r\n    },\r\n    add: (input) => {\r\n      let obj = {};\r\n      let inputValue = input;\r\n      let id = Math.floor(Math.random() * 1000);\r\n      obj = { inputValue, id };\r\n      dispatch({ type: \"ADD_INPUT\", value: obj });\r\n    },\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    todolist: state.input,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Todolist);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Input, InputGroup, InputGroupAddon } from \"reactstrap\";\r\nclass Main extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.todo.map((el) => (\r\n          <InputGroup\r\n            style={{\r\n              margin: \"30px auto\",\r\n              width: \"60%\",\r\n            }}\r\n          >\r\n            <Input defaultValue={el.inputValue} />\r\n            <InputGroupAddon addonType=\"append\" key={el.id}>\r\n              <Button\r\n                color=\"info\"\r\n                onClick={() => {\r\n                  this.props.remove(el.id);\r\n                }}\r\n              >\r\n                X\r\n              </Button>\r\n            </InputGroupAddon>\r\n          </InputGroup>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    todo: state.main,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    remove: (id) => {\r\n      dispatch({ type: \"REMOVE_INPUT\", id: id });\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n","import React from \"react\";\r\nimport Input from \"./components/input.js\";\r\nimport Main from \"./components/main\";\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Input />\r\n\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const inputReducer = (state = \"\", action) => {\r\n  if (action.type === \"SET_INPUT\") {\r\n    return action.value;\r\n  }\r\n  return state;\r\n};\r\nexport default inputReducer;\r\n","const mainReducer = (state = [], action) => {\r\n  if (action.type === \"ADD_INPUT\") {\r\n    return (state = [...state, action.value]);\r\n  }\r\n  if (action.type === \"REMOVE_INPUT\") {\r\n    return state.filter((el) => el.id !== action.id);\r\n  }\r\n  return state;\r\n};\r\nexport default mainReducer;\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport inputReducer from \"./reducers/inputReducer.js\";\r\nimport mainReducer from \"./reducers/mainReducer.js\";\r\nimport \"./store.css\";\r\n\r\nconst store = createStore(\r\n  combineReducers({\r\n    input: inputReducer,\r\n    main: mainReducer,\r\n  })\r\n);\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport store from \"./store.js\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}